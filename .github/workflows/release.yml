name: TproxyLink-v1.1

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - ".github"
      - "README.md"
    tags-ignore:
      - "v*"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - uses: actions/checkout@v3

      # Step 2: Set up GitHub token for authentication
      - name: Set up GitHub token
        run: echo "GH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      # Step 3: Get the repository name
      - name: Get repository name
        id: get_repo_name
        run: echo "REPO_NAME=$(basename $(git rev-parse --show-toplevel))" >> $GITHUB_ENV

      # Step 4: Update update.json file
      - name: Update update.json
        run: |
          version=$(grep -oP 'version=\K[^ ]+' module.prop)
          versionCode=$(grep -oP 'versionCode=\K[^ ]+' module.prop)

          echo '{
            "version": "'"${version}"'",
            "versionCode": "'"${versionCode}"'",
            "zipUrl": "https://github.com/t5188/${{ env.REPO_NAME }}/releases/download/'"${version}"'/TproxyLink-'${version}'.zip",
            "changelog": "https://github.com/t5188/${{ env.REPO_NAME }}/raw/main/CHANGELOG.md"
          }' > update.json

      # Step 5: Commit and push update.json
      - name: Commit and push update.json
        run: |
          git config --local user.name "t5188"
          git config --local user.email "acstudycn@gmail.com"
          git add update.json
          git commit -m "Update update.json for version $(grep -oP 'version=\K[^ ]+' module.prop)" || true
          git push -f origin main

      # Step 6: Run the build.sh script
      - name: Run build.sh
        run: sh build.sh

      # Step 7: Extract version from the filename of the zip file
      - name: Extract version from filename
        id: extract_version
        run: |
          zip_file=$(ls TproxyLink-v*.zip)
          version=$(echo "$zip_file" | sed -E 's/TproxyLink-v(.*).zip/v\1/')
          echo "VERSION=${version}" >> $GITHUB_ENV

      # Step 8: Read release notes from CHANGELOG.md
      - name: Read release notes from CHANGELOG.md
        id: get_release_notes
        run: |
          RELEASE_NOTES=$(cat CHANGELOG.md)
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Step 10: Upload the new release
      - name: Upload release
        uses: softprops/action-gh-release@v1
        if: ${{ success() }}
        with:
          tag_name: ${{ env.VERSION }}
          files: TproxyLink-v*.zip
          body: ${{ env.RELEASE_NOTES }}
          prerelease: false
          draft: false  # Ensure the release is not a draft
          overwrite: true  # Ensure the existing release is overwritten
          generate_release_notes: false
